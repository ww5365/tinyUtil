
------------------------------------------------------------------------------------------------------------------------------------------
cmdOption: 库

实现对命令行的参数进行解析，eg:
   ./run  -d=./conf  -f=test.conf  暂不支持 
./run   -d ./conf -f test.conf
./run -h 

能解析出命令行的参数


------------------------------------------------------------------------------------------------------------------------------------------
实现的工具类：CmdOption

/*
 *         与getopt行为不一致的地方：
 *         如果optstring = "a:b:"
 *         当：./run -a -b c d
 *         optstring会把 -b作为-a的参数
 *         而CmdOption会把c, d堆栈处理，把c给-b，把d给-a
*/

包含以下的方法

使用：

CmdOption opt;
opt['a'] 能获取到选项a对应的参数值

------------------------------------------------------------------------------------------------------------------------------------------
int init(int argc, char * const * argv, const char * optstring);

/*
 * @brief 命令行参数初始化（不可以重复调用）
 *
 * @param [in] argc   : int 参数个数
 * @param [in] argv   : char*  const* 参数
 * @param [in] optstring   : const char* 选项信息，与getopt相同
 * @return  int 0为成功，其它为失败
*/

下面说一下字符串optstring，它是作为选项的字符串的列表。

函数getopt()认为optstring中，以'-’开头的字符（注意！不是字符串！！）就是命令行参数选项，有的参数选项后面可以跟参数值。optstring中的格式规范如下： 
1) 单个字符，表示选项， 
2) 单个字符后接一个冒号”:”，表示该选项后必须跟一个参数值。参数紧跟在选项后或者以空格隔开。该参数的指针赋给optarg。 
3) 单个字符后跟两个冒号”:”，表示该选项后必须跟一个参数。参数必须紧跟在选项后不能以空格隔开。该参数的指针赋给optarg。（这个特性是GNU的扩展）。


------------------------------------------------------------------------------------------------------------------------------------------

bool hasOption(const char *) const;

/**
 * @brief 命令行参数中是否存在某个选项
 *
 * @return  bool 
 * @retval   
**/



------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------







